#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == postgresql:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2";
        if [[ -z $3 ]]; then
          APP=`echo $2 | cut -d '.' -f 1`;
          APP_IMAGE="$2"
        else
          APP_IMAGE=`echo $3 | cut -d '/' -f 2`;  # disregard app/ part of $IMAGE
        fi
        # Check if app exists with the same name
        if [[ -d "/home/git/$APP" ]]; then
          APP_EXISTS=true
        else
          APP_EXISTS=false
        fi
    fi
fi

case "$1" in
  postgresql:create)
    DB_IMAGE=postgresql/$APP_IMAGE
    # Check if DB container is installed
    IMAGE=$(docker images | grep "dokku/postgresql " |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "PostgreSQL image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    # Check if an existing DB volume exists
    DB_VOLUME_PATH="/var/lib/docker/volumes/postgresql-$APP_IMAGE"
    if [[ -d  $DB_VOLUME_PATH ]]; then
        VOLUME="$DB_VOLUME_PATH/layer:/opt/postgresql"
        echo
        echo "-----> Reusing postgresql/$APP_IMAGE database at volume $VOLUME"
    else
        VOLUME="/opt/postgresql"
        # Generate a random password for DB user
        DB_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        # Temporarily store it to a file
        if [[ ! -d /home/git/.postgresql ]]; then
            mkdir -p /home/git/.postgresql
            chown -R git: /home/git/.postgresql
        fi
        echo $DB_PASSWORD > "/home/git/.postgresql/pwd_$APP_IMAGE"
        chown git: "/home/git/.postgresql/pwd_$APP_IMAGE"
        # Fork DB image
        ID=$(docker run -d dokku/postgresql exit 0)
        docker wait $ID > /dev/null
        IMAGE=$(docker commit $ID)
        docker tag $IMAGE $DB_IMAGE
        # Launch container
        ID=$(docker run -v $VOLUME -p 5432 -d $DB_IMAGE /usr/bin/start_pgsql.sh $DB_PASSWORD)
        sleep 4
        # Rename persistent volume
        VOLUME_PATH=$(docker inspect $ID | grep "/var/lib/docker/volumes/" | awk '{print $2}' | sed -e"s/\/layer//" | sed -e's/"//g')
        mv $VOLUME_PATH $DB_VOLUME_PATH
        sleep 1
        echo
        echo "-----> PostgreSQL container created: $DB_IMAGE"
    fi
    # Link to a potential existing app
    dokku postgresql:link $APP $APP_IMAGE
    sleep 5
    dokku postgresql:info $APP_IMAGE
    ;;

  postgresql:delete)
    DB_IMAGE=postgresql/$APP_IMAGE
    # Stop the container
    ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID
    fi
    # Remove image
    IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE
    fi
    # Remove persistent volume
    if [[ -d "/var/lib/docker/volumes/postgresql-$APP_IMAGE" ]]; then
        rm -rf "/var/lib/docker/volumes/postgresql-$APP_IMAGE"
    fi
    echo
    echo "-----> PostgreSQL container deleted: $DB_IMAGE"
    ;;

  postgresql:info)
    DB_IMAGE=postgresql/$APP_IMAGE
    ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    PORT=$(docker port $ID 5432)
    echo
    echo "       Host: $IP"
    echo "       User: 'root'"
    if [[ -f "/home/git/.postgresql/pwd_$APP_IMAGE" ]]; then
        echo "       Password: '$(cat "/home/git/.postgresql/pwd_$APP_IMAGE")'"
    fi
    echo "       Database: 'db'"
    echo "       Public port: $PORT"
    echo
    ;;

  postgresql:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a database name"
            exit 1
        fi
        DB_IMAGE="postgresql/$APP_IMAGE"
        # Check temporary file
        if [[ ! -f "/home/git/.postgresql/pwd_$APP_IMAGE" ]]; then
              echo
              echo "Database is already linked"
              # echo
              # exit 1
        else
          DB_PASSWORD=$(cat "/home/git/.postgresql/pwd_$APP_IMAGE")
          ID=$(docker ps -a | grep "$DB_IMAGE":latest |  awk '{print $1}')
          IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
          # Write DATABASE_URL to app's ENV file
          URL="DATABASE_URL=postgres://root:$DB_PASSWORD@$IP/db"
          BRANCH=`echo $APP_IMAGE | cut -d '.' -f 2`;
          cat "/home/git/$APP/$BRANCH.ENV" | grep "$URL" || echo "export $URL" >> "/home/git/$APP/$BRANCH.ENV"
          echo
          echo "-----> $APP_IMAGE linked to $DB_IMAGE database"
          rm "/home/git/.postgresql/pwd_$APP_IMAGE"
       fi
    fi
    ;;

  postgresql:logs)
    DB_IMAGE=postgresql/$APP_IMAGE
    ID=$(docker ps -a | grep "$DB_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    postgresql:create <app>     Create a PostgreSQL container
    postgresql:delete <app>     Delete specified PostgreSQL container
    postgresql:info <app>       Display database informations
    postgresql:link <app> <db>  Link an app to a PostgreSQL database
    postgresql:logs <app>       Display last logs from PostgreSQL container
EOF
    ;;

esac
cat